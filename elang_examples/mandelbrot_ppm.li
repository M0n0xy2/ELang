extern fn print_char(char);
extern fn print_int(int);

fn color(red: int, green: int, blue: int) {
    print_char(red as char);
    print_char(green as char);
    print_char(blue as char);
}

fn main() -> int {
    let hxres = 500;
    let hyres = 500;
    let itermax = 100;
    let magnify = 1.0;

    #header
    print_char('P');
    print_char('6');
    print_char('\n');
    print_int(hxres);
    print_char(' ');
    print_int(hyres);
    print_char('\n');
    print_int(255);
    print_char('\n');

    let hy = 1;
    while hy <= hyres {
        let hx = 1;
        while hx <= hxres {
            let cx = ((hx as double) / (hxres as double) - 0.5) / magnify * 3.0 - 0.7;
            let cy = ((hy as double) / (hyres as double) - 0.5) / magnify * 3.0;
            let x = 0.0;
            let y = 0.0;

            let it2 = itermax + 1;
            let iteration = 1;
            while iteration <= itermax {
                let x_new = x * x - y * y + cx;
                let y_new = 2.0 * x * y + cy;

                x = x_new;
                y = y_new;

                if 100.0 < x * x + y * y {
                    it2 = iteration;
                    break;
                }

                iteration = iteration + 1;
            }
            if it2 < itermax {
                color(200 + (55 * it2) / 100, (230 * (100 - it2)) / 100, (230 * (100 - it2)) / 100 );
            } else {
                color(0, 255, 255);
            }
            hx = hx + 1;
        }
        hy = hy + 1;
    }

    return 0;
}
