use lexer;
use ast::*;

grammar;

pub TranslationUnit: TranslationUnit = {
    Declaration* => TranslationUnit { declarations: <> }
};

Declaration: Spanned<Declaration> = {
    Spanned<ExternFuncDecl>,
    Spanned<FuncDecl>,
};

ExternFuncDecl: Declaration = {
    "extern" "fn" <id:Identifier> "(" <params:Comma<Spanned<Type>>> ")" <r:@R> <ty:("->" <Spanned<Type>>)?>
    => Declaration::ExternFunction {
        name: id,
        params: params,
        return_ty: ty.unwrap_or(Spanned::new(ParseType::Unit, Span(r, r + 1))),
    }
};

FuncDecl: Declaration = {
    "fn" <id:Identifier> "(" <params:Comma<ParamDecl>> ")" <r:@R> <ty:("->" <Spanned<Type>>)?> <stmt:Spanned<CompoundStmt>>
    => Declaration::Function {
        name: id,
        params: params,
        return_ty: ty.unwrap_or(Spanned::new(ParseType::Unit, Span(r, r + 1))),
        stmt: stmt,
    }
};

ParamDecl: (String, Spanned<ParseType>) = {
    <Identifier> ":" <Spanned<Type>> => (<>)
};

Statement: Spanned<Statement> = {
    Spanned<LetStmt>,
    Spanned<LoopStmt>,
    Spanned<WhileStmt>,
    Spanned<IfStmt>,
    Spanned<BreakStmt>,
    Spanned<ContinueStmt>,
    Spanned<ReturnStmt>,
    Spanned<ExprStmt>,
    <Spanned<CompoundStmt>> => {
        let span = <>.span;
        Spanned::new(
            Statement::Compound(<>),
            span,
        )
    }
};

CompoundStmt: CompoundStatement = {
    "{" <Statement*> "}" => CompoundStatement(<>)
};

LetStmt: Statement = {
    "let" <id:Identifier> <ty:(":" <Spanned<Type>>)?> "=" <expr:Expr> ";" => Statement::Let {
        name: id,
        ty: ty,
        expr: expr,
    }
};

LoopStmt: Statement = {
    "loop" <Spanned<CompoundStmt>> => Statement::Loop { stmt: <> }
};

WhileStmt: Statement = {
    "while" <expr:Expr> <stmt:Spanned<CompoundStmt>> => Statement::While {
        cond: expr,
        stmt: stmt
    }
};

IfStmt: Statement = {
    "if" <if_cond:Expr> <if_stmt:Spanned<CompoundStmt>> <elseifs:ElseIfPart*> <else_part:ElsePart?> => {
        Statement::If {
            if_branch: (if_cond, if_stmt),
            elseif_branches: elseifs,
            else_branch: else_part,
        }
    }
};

ElseIfPart: (Spanned<Expression>, Spanned<CompoundStatement>) = {
    "else" "if" <Expr> <Spanned<CompoundStmt>>
};

ElsePart: Spanned<CompoundStatement> = {
    "else" <Spanned<CompoundStmt>>
};

BreakStmt: Statement = {
    "break" ";" => Statement::Break,
};

ContinueStmt: Statement = {
    "continue" ";" => Statement::Continue,
};

ReturnStmt: Statement = {
    "return" <Expr?> ";" => Statement::Return { expr: <> }
};

ExprStmt: Statement = {
    <Expr> ";" => Statement::Expression { expr: <> }
};

Expr = AssignExpr;

AssignExpr: Spanned<Expression> = {
    <l:@L> <lhs:LogOrExpr> "=" <rhs:AssignExpr> <r:@R> => {
        Spanned::new(
            Expression::Assign(Box::new(lhs), Box::new(rhs)),
            Span(l, r)
        )
    },
    LogOrExpr
};

LogOrExpr: Spanned<Expression> = {
    <l:@L> <lhs:LogAndExpr> "||" <rhs:LogAndExpr> <r:@R> => {
        Spanned::new(
            Expression::BinOp(BinOpCode::LogicalOr, Box::new(lhs), Box::new(rhs)),
            Span(l, r)
        )
    },
    LogAndExpr
};

LogAndExpr: Spanned<Expression> = {
    <l:@L> <lhs:EqExpr> "&&" <rhs:EqExpr> <r:@R> => {
        Spanned::new(
            Expression::BinOp(BinOpCode::LogicalAnd, Box::new(lhs), Box::new(rhs)),
            Span(l, r)
        )
    },
    EqExpr
};

EqExpr = Tier<EqOp, CompExpr>;
CompExpr = Tier<CompOp, SumExpr>;
SumExpr = Tier<SumOp, FactorExpr>;
FactorExpr = Tier<FactorOp, UnOpExpr>;

EqOp: BinOpCode = {
    "==" => BinOpCode::Equal,
    "!=" => BinOpCode::NotEqual,
};

CompOp: BinOpCode = {
    "<" => BinOpCode::Less,
    "<=" => BinOpCode::LessEqual,
    ">" => BinOpCode::Greater,
    ">=" => BinOpCode::GreaterEqual,
};

SumOp: BinOpCode = {
    "+" => BinOpCode::Add,
    "-" => BinOpCode::Sub,
};

FactorOp: BinOpCode = {
    "*" => BinOpCode::Times,
    "/" => BinOpCode::Divide,
    "%" => BinOpCode::Mod,
};

Tier<Op, NextTier>: Spanned<Expression> = {
    <l:@L> <lhs:Tier<Op, NextTier>> <op:Op> <rhs:NextTier> <r:@R> => {
        Spanned::new(
            Expression::BinOp(op, Box::new(lhs), Box::new(rhs)),
            Span(l, r)
        )
    },
    NextTier
};

UnOpExpr: Spanned<Expression> = {
    <l:@L> <op:UnOp> <expr:SubscriptOrCallExpr> <r:@R> => {
        Spanned::new(
            Expression::UnOp(op, Box::new(expr)),
            Span(l, r)
        )
    },
    SubscriptOrCallExpr
};

SubscriptOrCallExpr: Spanned<Expression> = {
    <l:@L> <lhs:Spanned<Term>> "[" <rhs:Expr> "]" <r:@R> =>
        Spanned::new(
            Expression::Subscript(Box::new(lhs), Box::new(rhs)),
            Span(l, r)
        ),
    <l:@L> <lhs:Spanned<Term>> "(" <rhs:Comma<Expr>> ")" <r:@R> =>
        Spanned::new(
            Expression::FuncCall(Box::new(lhs), rhs),
            Span(l, r)
        ),
    Spanned<Term>
};

Term: Expression = {
    DoubleLiteral => Expression::Literal(Literal::Double(<>)),
    IntLiteral => Expression::Literal(Literal::Int(<>)),
    BoolLiteral => Expression::Literal(Literal::Bool(<>)),
    Identifier => Expression::Identifier(<>),
    "(" <Expr> ")" => Expression::Paren(Box::new(<>)),
};

UnOp: UnOpCode = {
    "-" => UnOpCode::Minus,
    "!" => UnOpCode::LogicalNot,
    "&" => UnOpCode::AddressOf,
    "*" => UnOpCode::Deref,
};

Type: ParseType = {
    Identifier => ParseType::Lit(<>),
    "*" <Spanned<Type>> => ParseType::Ptr(Box::new(<>)),
    "[" <Spanned<Type>> "]" => ParseType::Array(Box::new(<>)),
    "(" ")" => ParseType::Unit,
};

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => v.into_iter().chain(e).collect()
};

Spanned<T>: Spanned<T> = {
    <l:@L> <t:T> <r:@R> => Spanned::new(
        t,
        Span(l, r)
    )
};

extern {
    type Location = usize;
    type Error = lexer::LexicalError;

    enum lexer::Token {
        "extern" => lexer::Token::ExternKeyword,
        "fn" => lexer::Token::FnKeyword,
        "let" => lexer::Token::LetKeyword,
        "while" => lexer::Token::WhileKeyword,
        "loop" => lexer::Token::LoopKeyword,
        "if" => lexer::Token::IfKeyword,
        "else" => lexer::Token::ElseKeyword,
        "return" => lexer::Token::ReturnKeyword,
        "break" => lexer::Token::BreakKeyword,
        "continue" => lexer::Token::ContinueKeyword,
        "(" => lexer::Token::OpenParen,
        ")" => lexer::Token::CloseParen,
        "[" => lexer::Token::OpenSquare,
        "]" => lexer::Token::CloseSquare,
        "{" => lexer::Token::OpenBracket,
        "}" => lexer::Token::CloseBracket,
        "->" => lexer::Token::Arrow,
        "," => lexer::Token::Comma,
        "." => lexer::Token::Dot,
        ";" => lexer::Token::SemiColon,
        ":" => lexer::Token::Colon,
        "+" => lexer::Token::Plus,
        "-" => lexer::Token::Minus,
        "*" => lexer::Token::Star,
        "/" => lexer::Token::Slash,
        "%" => lexer::Token::Modulo,
        "!" => lexer::Token::Bang,
        "<" => lexer::Token::Less,
        "<=" => lexer::Token::LessEqual,
        ">" => lexer::Token::Greater,
        ">=" => lexer::Token::GreaterEqual,
        "==" => lexer::Token::EqualEqual,
        "=" => lexer::Token::Equal,
        "!=" => lexer::Token::BangEqual,
        "&" => lexer::Token::Amp,
        "&&" => lexer::Token::AmpAmp,
        "||" => lexer::Token::PipePipe,
        IntLiteral => lexer::Token::IntLit(<i64>),
        DoubleLiteral => lexer::Token::DoubleLit(<f64>),
        BoolLiteral => lexer::Token::BoolLit(<bool>),
        Identifier => lexer::Token::Identifier(<String>),
    }
}
