use lexer;
use ast::*;
use span::{Spanned, Span};

grammar;

pub TranslationUnit: TranslationUnit = {
    <imports:Import*> <decls:Declaration*> =>
        TranslationUnit { imports: imports, declarations: decls }
};

Import: String = {
    "import" <Identifier> ";"
};

Declaration: Spanned<Declaration> = {
    Spanned<ExternFuncDecl>,
    Spanned<FuncDecl>,
    Spanned<StructDecl>,
};

ExternFuncDecl: Declaration = {
    "extern" "fn" <id:Identifier> "(" <params:Comma<Spanned<Type>>> <variadic:".."?>")" <r:@R> <ty:("->" <Spanned<Type>>)?> ";"
    => Declaration::ExternFunction {
        name: id,
        params: params,
        variadic: variadic.is_some(),
        return_ty: ty.unwrap_or(Spanned::new(ParseType::Unit, Span(r, r + 1))),
    }
};

FuncDecl: Declaration = {
    "fn" <id:Identifier> "(" <params:Comma<ParamDecl>> ")" <r:@R> <ty:("->" <Spanned<Type>>)?> <stmt:Spanned<CompoundStmt>>
    => Declaration::Function {
        name: id,
        params: params,
        return_ty: ty.unwrap_or(Spanned::new(ParseType::Unit, Span(r, r + 1))),
        stmt: stmt,
    }
};

ParamDecl: (Spanned<String>, Spanned<ParseType>) = {
    <id: Spanned<Identifier>> ":" <ty: Spanned<Type>> => { (id, ty) }
};

StructDecl: Declaration = {
    "struct" <id:Identifier> "{" <fields:Comma<ParamDecl>> "}"
    => Declaration::Struct {
        name: id,
        fields: fields
    }
};

Statement: Spanned<Statement> = {
    Spanned<LetStmt>,
    Spanned<LoopStmt>,
    Spanned<ForStmt>,
    Spanned<WhileStmt>,
    Spanned<IfStmt>,
    Spanned<BreakStmt>,
    Spanned<ContinueStmt>,
    Spanned<ReturnStmt>,
    Spanned<ExprStmt>,
    <Spanned<CompoundStmt>> => {
        let span = <>.span;
        Spanned::new(
            Statement::Compound(<>),
            span,
        )
    }
};

CompoundStmt: CompoundStatement = {
    "{" <Statement*> "}" => CompoundStatement(<>)
};

LetStmt: Statement = {
    "let" <id:Identifier> <ty:(":" <Spanned<Type>>)?> "=" <expr:Expr> ";" => Statement::Let {
        name: id,
        ty: ty,
        expr: expr,
    }
};

LoopStmt: Statement = {
    "loop" <Spanned<CompoundStmt>> => Statement::Loop { stmt: <> }
};

ForStmt: Statement = {
    "for" <name:Identifier> "=" <init:Expr> ";" <cond:Expr> ";" <step:ExprNoStruct> <stmt:Spanned<CompoundStmt>> => Statement::For {
        name: name,
        init_expr: init,
        cond_expr: cond,
        step_expr: step,
        stmt: stmt
    }
};

WhileStmt: Statement = {
    "while" <expr:ExprNoStruct> <stmt:Spanned<CompoundStmt>> => Statement::While {
        cond: expr,
        stmt: stmt
    }
};

IfStmt: Statement = {
    "if" <if_cond:ExprNoStruct> <if_stmt:Spanned<CompoundStmt>> <elseifs:ElseIfPart*> <else_part:ElsePart?> => {
        Statement::If {
            if_branch: (if_cond, if_stmt),
            elseif_branches: elseifs,
            else_branch: else_part,
        }
    }
};

ElseIfPart: (Spanned<Expression>, Spanned<CompoundStatement>) = {
    "else" "if" <ExprNoStruct> <Spanned<CompoundStmt>>
};

ElsePart: Spanned<CompoundStatement> = {
    "else" <Spanned<CompoundStmt>>
};

BreakStmt: Statement = {
    "break" ";" => Statement::Break,
};

ContinueStmt: Statement = {
    "continue" ";" => Statement::Continue,
};

ReturnStmt: Statement = {
    "return" <Expr?> ";" => Statement::Return { expr: <> }
};

ExprStmt: Statement = {
    <Expr> ";" => Statement::Expression { expr: <> }
};

Expr = ExprRestriced<"S">;
ExprNoStruct = ExprRestriced<"">;

ExprRestriced<S> = AssignExpr<S>;

AssignExpr<S>: Spanned<Expression> = {
    <l:@L> <lhs:LogOrExpr<S>> <op:AssignOp> <rhs:AssignExpr<S>> <r:@R> => {
        Spanned::new(
            Expression::Assign(op, Box::new(lhs), Box::new(rhs)),
            Span(l, r)
        )
    },
    LogOrExpr<S>
};

LogOrExpr<S> = Tier<LogicalOrOp, LogAndExpr<S>>;
LogAndExpr<S> = Tier<LogicalAndOp, EqExpr<S>>;

EqExpr<S>: Spanned<Expression> = {
    <l:@L> <lhs:CompExpr<S>> <op:EqOp> <rhs:CompExpr<S>> <r:@R> => {
        Spanned::new(
            Expression::BinOp(op, Box::new(lhs), Box::new(rhs)),
            Span(l, r)
        )
    },
    CompExpr<S>
};

CompExpr<S>: Spanned<Expression> = {
    <l:@L> <lhs:SumExpr<S>> <op:CompOp> <rhs:SumExpr<S>> <r:@R> => {
        Spanned::new(
            Expression::BinOp(op, Box::new(lhs), Box::new(rhs)),
            Span(l, r)
        )
    },
    SumExpr<S>
};

SumExpr<S> = Tier<SumOp, FactorExpr<S>>;
FactorExpr<S> = Tier<FactorOp, CastExpr<S>>;

CastExpr<S>: Spanned<Expression> = {
    <l:@L> <expr:UnOpExpr<S>> "as" <ty:Spanned<Type>> <r:@R> => {
        Spanned::new(
            Expression::Cast(Box::new(expr), ty),
            Span(l, r)
        )
    },
    UnOpExpr<S>
};

UnOpExpr<S>: Spanned<Expression> = {
    <l:@L> <op:UnOp> <expr:UnOpExpr<S>> <r:@R> => {
        Spanned::new(
            Expression::UnOp(op, Box::new(expr)),
            Span(l, r)
        )
    },
    SubscriptOrCallExpr<S>
};

SubscriptOrCallExpr<S>: Spanned<Expression> = {
    <l:@L> <lhs:SubscriptOrCallExpr<S>> "[" <rhs:Expr> "]" <r:@R> => {
        Spanned::new(
            Expression::Subscript(Box::new(lhs), Box::new(rhs)),
            Span(l, r)
        )
    },
    <l:@L> <lhs:SubscriptOrCallExpr<S>> "(" <rhs:Comma<Expr>> ")" <r:@R> => {
        Spanned::new(
            Expression::FuncCall(Box::new(lhs), rhs),
            Span(l, r)
        )
    },
    <l:@L> <lhs:SubscriptOrCallExpr<S>> "." <rhs:Spanned<Identifier>> <r:@R> => {
        Spanned::new(
            Expression::FieldAccess(Box::new(lhs), rhs),
            Span(l, r)
        )
    },
    Spanned<Term<S>>
};

Term<S>: Expression = {
    DoubleLiteral => Expression::Literal(Literal::Double(<>)),
    IntLiteral => Expression::Literal(Literal::Int(<>)),
    BoolLiteral => Expression::Literal(Literal::Bool(<>)),
    CharLiteral => Expression::Literal(Literal::Char(<>)),
    StringLiteral => Expression::StringLiteral(<>),
    "(" ")" => Expression::Literal(Literal::Unit),
    Identifier => Expression::Identifier(<>),
    "(" <Expr> ")" => Expression::Paren(Box::new(<>)),
    ArrayLiteral,
    StructLiteralOrId if S != "",
};

ArrayLiteral: Expression = {
    "[" <Comma<Expr>> "]" => Expression::ArrayFullLiteral(<>),
    "[" <expr:Expr> ";" <size:IntLiteral> "]" => Expression::ArrayDefaultLiteral(Box::new(expr), size),
};

StructLiteralOrId: Expression = {
    <id:Identifier> "{" <fields:Comma<Spanned<StructField>>> "}" => {
        Expression::StructLiteral(StructLiteral {
            name: id,
            fields: fields,
        })
    }
};

StructField: (String, Spanned<Expression>) = {
    <field:Identifier> ":" <expr:Expr> => (field, expr)
};

Tier<Op, NextTier>: Spanned<Expression> = {
    <l:@L> <lhs:Tier<Op, NextTier>> <op:Op> <rhs:NextTier> <r:@R> => {
        Spanned::new(
            Expression::BinOp(op, Box::new(lhs), Box::new(rhs)),
            Span(l, r)
        )
    },
    NextTier
};

AssignOp: Option<BinOpCode> = {
    "=" => None,
    "+=" => Some(BinOpCode::Add),
    "-=" => Some(BinOpCode::Sub),
    "*=" => Some(BinOpCode::Times),
    "/=" => Some(BinOpCode::Divide),
    "%=" => Some(BinOpCode::Mod),
};

LogicalOrOp: BinOpCode = {
    "||" => BinOpCode::LogicalOr
};

LogicalAndOp: BinOpCode = {
    "&&" => BinOpCode::LogicalAnd
};

EqOp: BinOpCode = {
    "==" => BinOpCode::Equal,
    "!=" => BinOpCode::NotEqual,
};

CompOp: BinOpCode = {
    "<" => BinOpCode::Less,
    "<=" => BinOpCode::LessEqual,
    ">" => BinOpCode::Greater,
    ">=" => BinOpCode::GreaterEqual,
};

SumOp: BinOpCode = {
    "+" => BinOpCode::Add,
    "-" => BinOpCode::Sub,
};

FactorOp: BinOpCode = {
    "*" => BinOpCode::Times,
    "/" => BinOpCode::Divide,
    "%" => BinOpCode::Mod,
};

UnOp: UnOpCode = {
    "-" => UnOpCode::Minus,
    "!" => UnOpCode::LogicalNot,
    "&" => UnOpCode::AddressOf,
    "*" => UnOpCode::Deref,
};

Type: ParseType = {
    Identifier => ParseType::Lit(<>),
    "*" <Spanned<Type>> => ParseType::Ptr(Box::new(<>)),
    "(" ")" => ParseType::Unit,
};

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => v.into_iter().chain(e).collect()
};

Spanned<T>: Spanned<T> = {
    <l:@L> <t:T> <r:@R> => Spanned::new(
        t,
        Span(l, r)
    )
};

extern {
    type Location = usize;
    type Error = lexer::LexicalError;

    enum lexer::Token {
        "import" => lexer::Token::ImportKeyword,
        "struct" => lexer::Token::StructKeyword,
        "extern" => lexer::Token::ExternKeyword,
        "fn" => lexer::Token::FnKeyword,
        "let" => lexer::Token::LetKeyword,
        "for" => lexer::Token::ForKeyword,
        "while" => lexer::Token::WhileKeyword,
        "loop" => lexer::Token::LoopKeyword,
        "if" => lexer::Token::IfKeyword,
        "else" => lexer::Token::ElseKeyword,
        "return" => lexer::Token::ReturnKeyword,
        "break" => lexer::Token::BreakKeyword,
        "continue" => lexer::Token::ContinueKeyword,
        "as" => lexer::Token::AsKeyword,
        "(" => lexer::Token::OpenParen,
        ")" => lexer::Token::CloseParen,
        "[" => lexer::Token::OpenSquare,
        "]" => lexer::Token::CloseSquare,
        "{" => lexer::Token::OpenBracket,
        "}" => lexer::Token::CloseBracket,
        "->" => lexer::Token::Arrow,
        "," => lexer::Token::Comma,
        "." => lexer::Token::Dot,
        ".." => lexer::Token::DotDot,
        ";" => lexer::Token::SemiColon,
        ":" => lexer::Token::Colon,
        "+" => lexer::Token::Plus,
        "-" => lexer::Token::Minus,
        "*" => lexer::Token::Star,
        "/" => lexer::Token::Slash,
        "%" => lexer::Token::Modulo,
        "+=" => lexer::Token::PlusEqual,
        "-=" => lexer::Token::MinusEqual,
        "*=" => lexer::Token::StarEqual,
        "/=" => lexer::Token::SlashEqual,
        "%=" => lexer::Token::ModuloEqual,
        "!" => lexer::Token::Bang,
        "<" => lexer::Token::Less,
        "<=" => lexer::Token::LessEqual,
        ">" => lexer::Token::Greater,
        ">=" => lexer::Token::GreaterEqual,
        "==" => lexer::Token::EqualEqual,
        "=" => lexer::Token::Equal,
        "!=" => lexer::Token::BangEqual,
        "&" => lexer::Token::Amp,
        "&&" => lexer::Token::AmpAmp,
        "||" => lexer::Token::PipePipe,
        IntLiteral => lexer::Token::IntLit(<i64>),
        DoubleLiteral => lexer::Token::DoubleLit(<f64>),
        BoolLiteral => lexer::Token::BoolLit(<bool>),
        CharLiteral => lexer::Token::CharLit(<String>),
        StringLiteral => lexer::Token::StringLit(<String>),
        Identifier => lexer::Token::Identifier(<String>),
    }
}
